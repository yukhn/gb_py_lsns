# 1. Создать список и заполнить его элементами различных типов данных. 
# Реализовать скрипт проверки типа данных каждого элемента. 
# Использовать функцию type() для проверки типа. Элементы списка можно
# не запрашивать у пользователя, а указать явно, в программе.

some_list = [36, 17.9, 'forty eight', 0x2a, type]
for i in some_list:
    print(type(i))

# 2. Для списка реализовать обмен значений соседних элементов. 
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. 
# При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().

another_list = []
while True:
    el = input("Введите элемент: ")
    if el == 'end':
        break
    else:
        another_list.append(el)

for i in range(0, (len(another_list)//2) + 1, 2):
    another_list[i], another_list[i+1] = another_list[i+1], another_list[i]

print(another_list)


# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить,
# к какому времени года относится месяц (зима, весна, лето, осень). 
# Напишите решения через list и dict.

# Через list
months = ["зима", "весна", "лето", "осень"]
number = int(input("Введите номер месяца: "))
print(months[int(number/3) - 4])

# Через dict
dict_months = {1: "зима", 2: "зима", 12: "зима",
                3: "весна", 4: "весна", 5: "весна",
                6: "лето", 7: "лето", 8: "лето",
                9: "осень", 10: "осень", 11: "осень"}
number = int(input("Введите номер месяца: "))
print(dict_months[number])

# 4. Пользователь вводит строку из нескольких слов, разделённых 
# пробелами. Вывести каждое слово с новой строки. Строки нужно 
# пронумеровать. Если слово длинное, выводить только первые 10 букв в 
# слове.

str_input = input("Введите строку: ")
list_str = str_input.split()
for i in list_str:
    print("{0}) {1}".format(list_str.index(i) + 1, i[:10]))


# 5. Реализовать структуру «Рейтинг», представляющую собой набор 
# натуральных чисел, который не возрастает. У пользователя нужно 
# запрашивать новый элемент рейтинга. Если в рейтинге существуют 
# элементы с одинаковыми значениями, то новый элемент с тем же значением
# должен разместиться после них.

from random import randrange

my_list = []
for i in range(11):
    my_list.append(randrange(1, 11))

my_list = sorted(my_list, reverse=True)
new_el = int(input("Введите число: "))
for i in my_list:
    if (new_el > i):
        my_list.insert(my_list.index(i), new_el)
        break
    elif my_list.index(i) == (len(my_list) - 1):
        my_list.append(new_el)
        break

 print(my_list)

# 6. * Реализовать структуру данных «Товары». Она должна представлять
# собой список кортежей. Каждый кортеж хранит информацию об отдельном 
# товаре. В кортеже должно быть два элемента — номер товара и словарь с 
# параметрами, то есть характеристиками товара: название, цена,
# количество, единица измерения. Структуру нужно сформировать программно,
# запросив все данные у пользователя.

# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]

product_list = []

def products():
    dict_params = {"Название": None, "Цена": None, "Количество": None, "Ед.": None}
    for key in dict_params:
        dict_params[key] = input("Введите параметр для характеристики товара - {0}: ".format(key))
    return dict_params

while True:
    answer = input("Хотите добавить товар? Y/N: ")
    if answer == 'N':
        break
    elif answer == 'Y':
        product = ((len(product_list) + 1), products())
        product_list.append(product)

# Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый
# ключ — характеристика товара, например, название. Тогда значение — список
# значений-характеристик, например, список названий товаров.

# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

def params(params):
    value = []
    for i in range(len(product_list)):
        for k in product_list[i][-1]:
            if params == k:
                value.append(product_list[i][-1][k])
    return value

analysic = {}
for key in list(product_list[0][-1].keys()):
    analysic[key] = params(key)

for k, v in analysic.items():
    print("{0}: {1}".format(k, v))