# 1. Реализовать функцию, принимающую два числа (позиционные аргументы)
# и выполняющую их деление. Числа запрашивать у пользователя, 
# предусмотреть обработку ситуации деления на ноль.

def division(var_1, var_2):
    """Возвращает частное от деления

    Выводит значение, округляя его до 3 знака после запятой
    Позиционные аргументы:
    var_1 = делимое
    var_2 = делитель
    """
    try:
        return "Их частное = {0:.{1}f}".format((var_1 / var_2), 3)
    except ZeroDivisionError:
        return "Ошибка! Деление на ноль"

a, b = map(int, input("Введите 2 числа через пробел: ").split())
division(a, b)

# 2. Выполнить функцию, которая принимает несколько параметров, 
# описывающих данные пользователя: имя, фамилия, год рождения, город
# проживания, email, телефон. Функция должна принимать параметры как
# именованные аргументы. Осуществить вывод данных о пользователе одной
# строкой.

def information(name=None, last_name=None, year=None, city=None, email=None, tel=None):
    '''Функция принимает в себя 6 значений и выводит их'''
    print(f"Имя: {name}, Фамилия: {last_name}, Год рождения: {year}, Город проживания: {city}, E-mail: {email}, Телефон: {tel}")

information()

# 3. Реализовать функцию my_func(), которая принимает три позиционных
# аргумента и возвращает сумму наибольших двух аргументов.

def my_func(a, b, c):
    """Возвращает сумму двух последних элементов отсортированного списка"""
    return "Сумма двух наибольших аргументов: {0}".format(sorted([a, b, c])[-1] + sorted([a, b, c])[-2])

# 4. Программа принимает действительное положительное число x и целое
# отрицательное число y. Выполните возведение числа x в степень y.
# Задание реализуйте в виде функции my_func(x, y). При решении
# задания нужно обойтись без встроенной функции возведения числа в
# степень.
# Подсказка: попробуйте решить задачу двумя способами.
# Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **,
# предусматривающая использование цикла.

# Первый способ
def my_func(x, y):
    """Возведение в степень с помощью оператора **"""
    return x ** y

# Второй способ
def my_func(x, y):
    """Возведение в без оператора **

    a принимает аргумент х
    умножаем х на а столько раз, чему равно -y
    функция возвращает значение 1/х, так как у отрицательное число

    """
    a = x
    for i in range(1, -y):
        x *= a
    return 1 / x

# 5. Программа запрашивает у пользователя строку чисел, разделённых 
# пробелом. При нажатии Enter должна выводиться сумма чисел. 
# Пользователь может продолжить ввод чисел, разделённых пробелом и 
# снова нажать Enter. Сумма вновь введённых чисел будет добавляться
# к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение
# программы завершается. Если специальный символ введён после
# нескольких чисел, то вначале нужно добавить сумму этих чисел к
# полученной ранее сумме и после этого завершить программу.

def numbers_sum():
    '''Вызывает ввод строки из чисел через пробел и возвращает их сумму

    Цикл суммирования выполняется до тех пор, пока не будет вызванно исключение
    вводом спецсимвола или типом данных, отличным от int().

    Если введенный символ не *, то ввод продолжается, иначе берется сумма среза
    списка до элемента * и суммируется с имеющейся суммой.

    list_of_str = список с элементами типа str
    list_of_int = список с элементами типа int
    '''
    x = 0
    str_inter = "Введите числа через пробел или * для завершения программы: "
    while True:
        try:
            list_of_str = list(input(str_inter).split())
            list_of_int = map(int, list_of_str)
            x += sum(list_of_int)
            print("Сумма всех введенных чисел равна {0}".format(x))
        except ValueError:
            if '*' in list_of_str:
                x += sum(map(int, list_of_str[:list_of_str.index('*')]))
                return "Конец программы. Сумма всех введенных чисел равна {0}".format(x)
            else:
                print("Некорректная строка, повторите ввод")

numbers_sum()

# 6. Реализовать функцию int_func(), принимающую слова из маленьких 
# латинских букв и возвращающую их же, но с прописной первой буквой.
# Например, print(int_func(‘text’)) -> Text.

def int_func(word):
    '''Возвращение принимаемых слов с прописной буквы'''
    return word.title()

# 7. Продолжить работу над заданием. В программу должна попадать 
# строка из слов, разделённых пробелом. Каждое слово состоит из 
# латинских букв в нижнем регистре. Нужно сделать вывод исходной
# строки, но каждое слово должно начинаться с заглавной буквы.
# Используйте написанную ранее функцию int_func().

def string_capitalize_func():
    '''Возвращает строку со словами, начинающиеся с заглавной буквы'''
    string = input("Введите строку из слов, разделенные пробелом: ")
    print(int_func(string))

string_capitalize_func()