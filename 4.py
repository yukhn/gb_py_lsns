# 1. Реализовать скрипт, в котором должна быть предусмотрена функция 
# расчёта заработной платы сотрудника. Используйте в нём формулу: 
# (выработка в часах*ставка в час) + премия. Во время выполнения 
# расчёта для конкретных значений необходимо запускать скрипт с 
# параметрами.

from sys import argv

script_name, first_name, work_hours, wages, prize = argv

wage = int(work_hours) * int(wages) + int(prize)
print("Расчет ЗП для {0}: {1}".format(first_name, wage))

# 2. Представлен список чисел. Необходимо вывести элементы исходного
# списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде 
# списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

from random import randint

num_gen = [randint(1, 999) for i in range(0, 13)]
print([num_gen[i] for i in range(1, len(num_gen)) if num_gen[i] > num_gen[i-1]])

#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

print([i for i in range(20, 241) if (i % 20 == 0) or (i % 21 == 0)])

# 4. Представлен список чисел. Определите элементы списка, не имеющие
# повторений. Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке. Для
# выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

num_gen = [randint(1, 13) for i in range(0, 13)]
print([i for i in num_gen if num_gen.count(i) == 1])

# 5. Реализовать формирование списка, используя функцию range() и возможности
# генератора. В список должны войти чётные числа от 100 до 1000 
# (включая границы). Нужно получить результат вычисления произведения всех
# элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

some_list = (i for i in range(100, 1001, 2))
composition = reduce(lambda x, y : x * y, some_list)
print(composition)

# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.

# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите
# внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите
# условие его завершения. 
# Например, в первом задании выводим целые числа,
# начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом 
# необходимо предусмотреть условие, при котором повторение элементов списка 
# прекратится.

# Итератор, генерирующий целые числа, начиная с указанного
from itertools import count

def iterator(var_1):
    for i in count(var_1):
        if i > 17:
            break
        else:
            print(i)

iterator(3)

# Итератор, повторяющий элементы некоторого списка, определённого заранее
from itertools import cycle

some_list = [i for i in range(1, 11)]
counter = 0

for i in cycle(some_list):
    if counter > (len(some_list) * 3):
        break
    print(i)
    counter += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, 
# создающим очередное значение. При вызове функции должен создаваться 
# объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только
# первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например,
# факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    fac = 1
    for i in range(1, n + 1):
        fac *= i
        yield fac

for i in fact(5):
    print(i)